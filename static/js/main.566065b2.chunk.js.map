{"version":3,"sources":["components/slider.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["slider_WebSlider","_super","WebSlider","props","_this","call","this","state","value","images","fillArray","index","tslib_es6","prototype","len","arr","i","push","render","react","className","Slider","min","max","length","step","defaultValue","Math","floor","onChange","setState","src","alt","width","height","src_App_0","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","react_dom","document","getElementById","URL","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gNAIAA,EAAA,SAAAC,GAQE,SAAAC,EAAYC,GAAZ,IAAAC,EACEH,EAAAI,KAAAC,KAAMH,IAAMG,YAEZF,EAAKG,MAAQ,CACXC,MAAO,EACPC,OAAQL,EAAKM,UAAU,KACvBC,MAAO,KAmCb,OAjD+BC,EAAA,EAAAV,EAAAD,GAkB7BC,EAAAW,UAAAH,UAAA,SAAUI,GAER,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EAAIF,EAAKE,IACvBD,EAAIE,KAAK,eAAuB,IAALD,EAAE,GAAQ,QAEvC,OAAOD,GAGFb,EAAAW,UAAAK,OAAP,eAAAd,EAAAE,KAIE,OACIa,EAAA,qBAAKC,UAAU,OACXD,EAAA,cAACE,EAAA,EAAM,CACHD,UAAU,SACVE,IAAK,EACLC,IAAKjB,KAAKC,MAAME,OAAOe,OACvBC,KAAM,EACNC,aAAcC,KAAKC,MAAiC,IAA1BtB,KAAKC,MAAME,OAAa,QAClDoB,SAAU,SAACrB,GAAe,OAAAJ,EAAK0B,SAAS,CAAEnB,MAAOH,EAAM,OAE3DW,EAAA,qBACAY,IAAKzB,KAAKC,MAAME,OAAOH,KAAKC,MAAMI,OAClCqB,IAAI,UACJC,MAAO,QACPC,OAAQ,YAKpBhC,EAjDA,CAA+BiB,EAAA,WCUhBgB,SAVf,SAAAlC,GAAA,SAAAmC,mDAQA,OARkBxB,EAAA,EAAAwB,EAAAnC,GACTmC,EAAAvB,UAAAK,OAAP,WACE,OACEC,EAAA,qBAAKC,UAAU,OACbD,EAAA,cAACnB,EAAS,QAIlBoC,EARA,CAAkBjB,EAAA,YCOZkB,SAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAyCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfsC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAOvBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KC/EjEC,EAAA,OACExC,EAAA,cAACgB,EAAG,MACJyB,SAASC,eAAe,SDaX,WACb,GAA6C,kBAAmBhB,UAAW,CAMzE,GAJkB,IAAIiB,IACpB,kBACAvB,OAAOC,SAASuB,YAEJC,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAW,oCAEbP,GAmDV,SAAiCO,GAE/BsB,MAAMtB,GACHI,KAAK,SAAAmB,GAGkB,MAApBA,EAASC,SACwD,IAAjED,EAASE,QAAQC,IAAI,gBAAiBC,QAAQ,cAG9C1B,UAAUC,cAAc0B,MAAMxB,KAAK,SAAAC,GACjCA,EAAawB,aAAazB,KAAK,WAC7BT,OAAOC,SAASkC,aAKpB/B,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEAvEAmB,CAAwB/B,GAIxBC,UAAUC,cAAc0B,MAAMxB,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MC1CxBG","file":"static/js/main.566065b2.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Slider } from 'office-ui-fabric-react/lib/Slider';\n// import { Image } from 'office-ui-fabric-react/lib/Image';\n\nexport class WebSlider extends React.Component<\n  {},\n  {\n    value: number;\n    images: Array<string>;\n    index: number;\n  }\n> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      value: 0,\n      images: this.fillArray(500),\n      index: 0\n    };\n  }\n\n  fillArray(len: number) {\n    const arr = [];\n    for (let i = 0; i < len; i++) {\n      arr.push('images/step_' + (i+1)*10 + '.png');\n    }\n    return arr;\n  }\n\n  public render(): JSX.Element {\n    // const resize = 0.60;\n    // const width_ = Math.floor(1920*resize) + 'em';\n    // const height_ = Math.floor(1080*resize) + 'em';\n    return (\n        <div className='box'>\n            <Slider\n                className='slider'\n                min={1}\n                max={this.state.images.length}\n                step={1}\n                defaultValue={Math.floor((this.state.images.length)*0.35)}\n                onChange={(value: any) => this.setState({ index: value-1})}\n            />\n            <img\n            src={this.state.images[this.state.index]}\n            alt=\"Sublime\"\n            width={'960px'}\n            height={'540px'}\n            />\n        </div>\n    );\n  }\n}","import * as React from 'react';\nimport { WebSlider } from './components/slider';\nimport './App.css';\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <div className=\"App\">\n        <WebSlider/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}